name: Multi-Platform Build and Release Workflow

on:
  workflow_dispatch:

jobs:
  get-latest-tag:
    name: Get Latest Git Tag
    runs-on: ubuntu-latest
    outputs:
      tag_name: ${{ steps.get_tag.outputs.tag }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Get latest tag
        id: get_tag
        run: |
          TAG=$(git describe --tags `git rev-list --tags --max-count=1`)
          echo "tag=$TAG" >> $GITHUB_ENV
          echo "::set-output name=tag::${TAG}"

  windows-build:
    name: Build for Windows (Inno Setup)
    runs-on: windows-latest
    needs: get-latest-tag

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: 'stable'

      - name: Install dependencies
        run: flutter pub get

      - name: Build Windows app
        run: flutter build windows

      - name: Install Inno Setup
        run: choco install innosetup -y

      - name: Create Inno Setup script
        run: |
          echo ; Inno Setup script to package the Flutter app > package.iss
          echo [Setup] >> package.iss
          echo AppName=OpenOTP >> package.iss
          echo AppVersion=${{ needs.get-latest-tag.outputs.tag_name }} >> package.iss
          echo DefaultDirName={pf}\OpenOTP >> package.iss
          echo DefaultGroupName=OpenOTP >> package.iss
          echo OutputBaseFilename=OpenOTPInstaller >> package.iss
          echo [Files] >> package.iss
          echo Source: "build\windows\runner\Release\*"; DestDir: "{app}"; Flags: ignoreversion recursesubdirs createallsubdirs >> package.iss
          echo [Icons] >> package.iss
          echo Name: "{group}\OpenOTP"; Filename: "{app}\OpenOTP.exe" >> package.iss

      - name: Create Installer
        run: iscc package.iss

      - name: Upload Installer
        uses: actions/upload-artifact@v3
        with:
          name: OpenOTP-Windows-Installer
          path: OpenOTPInstaller.exe

  linux-build:
    name: Build for Linux (AppImage)
    runs-on: ubuntu-latest
    needs: get-latest-tag

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: 'stable'

      - name: Install dependencies
        run: flutter pub get

      - name: Build Linux app
        run: flutter build linux

      - name: Install AppImageTool
        run: |
          sudo apt-get update
          sudo apt-get install -y appimagetool

      - name: Package as AppImage
        run: |
          mkdir -p AppDir/usr/bin
          cp -r build/linux/x64/release/bundle/* AppDir/usr/bin
          appimagetool AppDir OpenOTP.AppImage

      - name: Upload AppImage
        uses: actions/upload-artifact@v3
        with:
          name: OpenOTP-Linux-AppImage
          path: OpenOTP.AppImage

  android-build:
    name: Build for Android (APK)
    runs-on: ubuntu-latest
    needs: get-latest-tag

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: 'stable'

      - name: Install dependencies
        run: flutter pub get

      - name: Build Android APK
        run: flutter build apk

      - name: Upload APK
        uses: actions/upload-artifact@v3
        with:
          name: OpenOTP-Android-APK
          path: build/app/outputs/flutter-apk/app-release.apk

  ios-macos-build:
    name: Trigger iOS and macOS Build on Codemagic
    runs-on: ubuntu-latest
    needs: get-latest-tag

    steps:
      - name: Trigger Codemagic Build
        run: |
          curl -X POST \
          -H "Content-Type: application/json" \
          -H "x-auth-token: ${{ secrets.CODEMAGIC_TOKEN }}" \
          -d '{
            "appId": "your-codemagic-app-id",
            "workflowId": "your-codemagic-workflow-id",
            "branch": "main",
            "environment": {
              "TAG_NAME": "${{ needs.get-latest-tag.outputs.tag_name }}"
            }
          }' \
          https://api.codemagic.io/builds

  create-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: [windows-build, linux-build, android-build]
    steps:
      - name: Download Artifacts
        uses: actions/download-artifact@v3
        with:
          path: artifacts/

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        with:
          tag_name: ${{ needs.get-latest-tag.outputs.tag_name }}
          release_name: "Release ${{ needs.get-latest-tag.outputs.tag_name }}"
          body: |
            ## Release Notes
            - Windows Installer
            - Linux AppImage
            - Android APK
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload Release Assets
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: artifacts/
          asset_name: OpenOTP-Multi-Platform-Build.zip
          asset_content_type: application/zip