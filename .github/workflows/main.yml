name: Multi-Platform Build and Release Workflow

on:
  workflow_dispatch:

jobs:
  get-latest-tag:
    name: Get Latest Git Tag
    runs-on: ubuntu-latest
    outputs:
      tag_name: ${{ steps.get_tag.outputs.tag }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Get latest tag
        id: get_tag
        run: |
          TAG=$(git describe --tags "$(git rev-list --tags --max-count=1)")
          echo "tag=${TAG}" >> "$GITHUB_OUTPUT"

  windows-build:
    name: Build for Windows (Inno Setup)
    runs-on: windows-latest
    needs: get-latest-tag
    outputs:
      windows_artifact: ${{ steps.upload_windows.outputs.artifact_path }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Fix flutter SDK folder permission
        run: git config --global --add safe.directory %TEMP%/flutter/--

      - name: Set up Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.29.2'

      - name: Install dependencies
        run: flutter pub get

      - name: Build Windows app
        run: flutter build windows

      - name: Install Inno Setup
        run: choco install innosetup -y

      - name: Create Inno Setup script
        run: |
          echo '; Inno Setup script to package the Flutter app' > package.iss
          echo '[Setup]' >> package.iss
          echo 'AppName=OpenOTP' >> package.iss
          echo "AppVersion=${{ needs.get-latest-tag.outputs.tag_name }}" >> package.iss
          echo 'DefaultDirName={pf}\OpenOTP' >> package.iss
          echo 'DefaultGroupName=OpenOTP' >> package.iss
          echo 'OutputBaseFilename=OpenOTPInstaller' >> package.iss
          echo '[Files]' >> package.iss
          echo 'Source: "build\windows\runner\Release\*"; DestDir: "{app}"; Flags: ignoreversion recursesubdirs createallsubdirs' >> package.iss
          echo '[Icons]' >> package.iss
          echo 'Name: "{group}\OpenOTP"; Filename: "{app}\OpenOTP.exe"' >> package.iss
          
      - name: Create Installer
        run: iscc package.iss

      - name: Upload Installer
        id: upload_windows
        uses: actions/upload-artifact@v4
        with:
          name: OpenOTP-Windows-Installer
          path: OpenOTPInstaller.exe

  linux-build:
    name: Build for Linux (AppImage)
    runs-on: ubuntu-latest
    needs: get-latest-tag
    outputs:
      linux_artifact: ${{ steps.upload_linux.outputs.artifact_path }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install GTK+ 3.0 dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y libgtk-3-dev

      - name: Fix flutter SDK folder permission
        run: git config --global --add safe.directory /tmp/flutter/--

      - name: Set up Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.29.2'

      - name: Install dependencies
        run: flutter pub get

      - name: Build Linux app
        run: flutter build linux

      - name: Install AppImageTool
        run: |
          sudo apt-get update
          sudo apt-get install -y appimagetool

      - name: Package as AppImage
        run: |
          mkdir -p AppDir/usr/bin
          cp -r build/linux/x64/release/bundle/* AppDir/usr/bin
          appimagetool AppDir OpenOTP.AppImage

      - name: Upload AppImage
        id: upload_linux
        uses: actions/upload-artifact@v4
        with:
          name: OpenOTP-Linux-AppImage
          path: OpenOTP.AppImage

  android-build:
    name: Build for Android (APK)
    runs-on: ubuntu-latest
    needs: get-latest-tag
    outputs:
      android_artifact: ${{ steps.upload_android.outputs.artifact_path }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Fix flutter SDK folder permission
        run: git config --global --add safe.directory /tmp/flutter/--

      - name: Set up Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.29.2'

      - name: Install dependencies
        run: flutter pub get

      - name: Build Android APK
        run: flutter build apk

      - name: Upload APK
        id: upload_android
        uses: actions/upload-artifact@v4
        with:
          name: OpenOTP-Android-APK
          path: build/app/outputs/flutter-apk/app-release.apk

  ios-build:
    name: Trigger iOS Build on Codemagic
    runs-on: ubuntu-latest
    needs: get-latest-tag
    outputs:
      build_id: ${{ steps.trigger_build.outputs.build_id }}
    steps:
      - name: Trigger Codemagic iOS Build
        id: trigger_build
        run: |
          RESPONSE=$(curl -X POST \
          -H "Content-Type: application/json" \
          -H "x-auth-token: ${{ secrets.CODEMAGIC_TOKEN }}" \
          -d '{
            "appId": "67ff48a213eb8825035b25df",
            "workflowId": "67ff48a213eb8825035b25de",
            "branch": "master",
            "environment": {
              "TAG_NAME": "${{ needs.get-latest-tag.outputs.tag_name }}"
            }
          }' \
          https://api.codemagic.io/builds)

          echo "$RESPONSE"
          BUILD_ID=$(echo "$RESPONSE" | jq -r '.buildId')
          echo "build_id=${BUILD_ID}" >> "$GITHUB_OUTPUT"

  wait-for-codemagic:
    name: Wait for Codemagic iOS Build Completion
    runs-on: ubuntu-latest
    needs: ios-build
    outputs:
      build_status: ${{ steps.check_status.outputs.status }}
    steps:
      - name: Wait for Build to Complete
        id: check_status
        run: |
          BUILD_ID=${{ needs.ios-build.outputs.build_id }}
          STATUS="in-progress"
          while [ "$STATUS" == "in-progress" ] || [ "$STATUS" == "queued" ]; do
            echo "Checking build status..."
            RESPONSE=$(curl -X GET \
              -H "x-auth-token: ${{ secrets.CODEMAGIC_TOKEN }}" \
              "https://api.codemagic.io/builds/$BUILD_ID")

            echo "$RESPONSE"
            STATUS=$(echo "$RESPONSE" | jq -r '.status')
            echo "Current Status: $STATUS"

            if [ "$STATUS" == "failed" ]; then
              echo "Codemagic build failed."
              exit 1
            fi

            if [ "$STATUS" == "success" ]; then
              echo "Codemagic build completed successfully."
              break
            fi

            echo "Waiting for 30 seconds before checking again..."
            sleep 30
          done
          echo "status=${STATUS}" >> "$GITHUB_OUTPUT"

  fetch-codemagic-artifacts:
    name: Fetch iOS IPA from Codemagic
    runs-on: ubuntu-latest
    needs: wait-for-codemagic
    outputs:
      codemagic_artifact: ${{ steps.upload_codemagic.outputs.artifact_path }}
    steps:
      - name: Get IPA Artifact URL
        id: get_artifacts
        run: |
          BUILD_ID=${{ needs.ios-build.outputs.build_id }}
          RESPONSE=$(curl -X GET \
            -H "x-auth-token: ${{ secrets.CODEMAGIC_TOKEN }}" \
            "https://api.codemagic.io/builds/$BUILD_ID/artifacts")
          echo "$RESPONSE" > artifacts.json
          IPA_URL=$(jq -r '.artifacts[] | select(.name | endswith(".ipa")) | .url' artifacts.json)
          echo "IPA_URL=$IPA_URL" >> $GITHUB_ENV

      - name: Download IPA
        run: |
          curl -L -o OpenOTP.ipa "$IPA_URL"

      - name: Upload IPA
        id: upload_codemagic
        uses: actions/upload-artifact@v4
        with:
          name: OpenOTP-iOS-IPA
          path: OpenOTP.ipa

  create-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: [get-latest-tag, windows-build, linux-build, android-build, fetch-codemagic-artifacts]
    steps:
      - name: Create GitHub Release and Upload Assets
        uses: ncipollo/release-action@v1
        with:
          tag: ${{ needs.get-latest-tag.outputs.tag_name }}
          name: "Release ${{ needs.get-latest-tag.outputs.tag_name }}"
          body: |
            ## Release Notes
            - Windows Installer
            - Linux AppImage
            - Android APK
            - iOS IPA
          draft: false
          prerelease: false
          token: ${{ secrets.GITHUB_TOKEN }}
          artifacts: |
            ${{ needs.windows-build.outputs.windows_artifact }}
            ${{ needs.linux-build.outputs.linux_artifact }}
            ${{ needs.android-build.outputs.android_artifact }}
            ${{ needs.fetch-codemagic-artifacts.outputs.codemagic_artifact }}